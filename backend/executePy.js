// Importing the 'exec' function from the 'child_process' module
// 'exec' allows us to run shell commands from within Node.js.
const { exec } = require("child_process");

// Function to execute a Python script
// Accepts the file path of the Python script as an argument.
const executePy = (filepath) => {
  // Returning a Promise to handle asynchronous execution of the Python script.
  return new Promise((resolve, reject) => {
    // Using 'exec' to run the Python script located at the given file path.
    exec(
      `python ${filepath}`, // Shell command to execute the Python script.
      (error, stdout, stderr) => {
        // Callback function that runs after the command executes.

        // If there's an error (e.g., Python isn't installed or script fails), reject the Promise.
        // 'error' contains details about why the execution failed.
        if (error) {
          reject({ error, stderr }); // Reject with both the error and standard error details.
          return; // Exit the function to avoid further execution.
        }

        // If there's a standard error (e.g., errors printed by the Python script), reject the Promise.
        if (stderr) {
          reject(stderr); // Reject with the standard error message.
          return; // Exit the function to avoid further execution.
        }

        // If execution is successful, resolve the Promise with the standard output.
        // 'stdout' contains the output generated by the Python script.
        resolve(stdout);
      }
    );
  });
};

// Exporting the 'executePy' function so it can be used in other files.
// This follows the CommonJS module system used in Node.js.
module.exports = {
  executePy,
};
  